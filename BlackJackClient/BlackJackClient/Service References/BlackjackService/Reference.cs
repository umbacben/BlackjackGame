//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlackJackClient.BlackjackService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/BlackjackService")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HandValField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BlackJackClient.BlackjackService.Card[] PlayHandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReadyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RoundDoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BlackJackClient.BlackjackService.User UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HandVal {
            get {
                return this.HandValField;
            }
            set {
                if ((this.HandValField.Equals(value) != true)) {
                    this.HandValField = value;
                    this.RaisePropertyChanged("HandVal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BlackJackClient.BlackjackService.Card[] PlayHand {
            get {
                return this.PlayHandField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayHandField, value) != true)) {
                    this.PlayHandField = value;
                    this.RaisePropertyChanged("PlayHand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Ready {
            get {
                return this.ReadyField;
            }
            set {
                if ((this.ReadyField.Equals(value) != true)) {
                    this.ReadyField = value;
                    this.RaisePropertyChanged("Ready");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RoundDone {
            get {
                return this.RoundDoneField;
            }
            set {
                if ((this.RoundDoneField.Equals(value) != true)) {
                    this.RoundDoneField = value;
                    this.RaisePropertyChanged("RoundDone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BlackJackClient.BlackjackService.User UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/BlackjackService")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/BlackjackService")]
    [System.SerializableAttribute()]
    public partial class Card : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PicLocField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PicLoc {
            get {
                return this.PicLocField;
            }
            set {
                if ((object.ReferenceEquals(this.PicLocField, value) != true)) {
                    this.PicLocField = value;
                    this.RaisePropertyChanged("PicLoc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlackJackGame", Namespace="http://schemas.datacontract.org/2004/07/BlackjackService")]
    [System.SerializableAttribute()]
    public partial class BlackJackGame : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BlackJackClient.BlackjackService.Player HostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private BlackJackClient.BlackjackService.Player Player2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool inRoundField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BlackJackClient.BlackjackService.Player Host {
            get {
                return this.HostField;
            }
            set {
                if ((object.ReferenceEquals(this.HostField, value) != true)) {
                    this.HostField = value;
                    this.RaisePropertyChanged("Host");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BlackJackClient.BlackjackService.Player Player2 {
            get {
                return this.Player2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player2Field, value) != true)) {
                    this.Player2Field = value;
                    this.RaisePropertyChanged("Player2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Pot {
            get {
                return this.PotField;
            }
            set {
                if ((this.PotField.Equals(value) != true)) {
                    this.PotField = value;
                    this.RaisePropertyChanged("Pot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool inRound {
            get {
                return this.inRoundField;
            }
            set {
                if ((this.inRoundField.Equals(value) != true)) {
                    this.inRoundField = value;
                    this.RaisePropertyChanged("inRound");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="BlackjackService", ConfigurationName="BlackjackService.IBlackjackGame", CallbackContract=typeof(BlackJackClient.BlackjackService.IBlackjackGameCallback))]
    public interface IBlackjackGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/Hit", ReplyAction="BlackjackService/IBlackjackGame/HitResponse")]
        bool Hit(BlackJackClient.BlackjackService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/Hit", ReplyAction="BlackjackService/IBlackjackGame/HitResponse")]
        System.Threading.Tasks.Task<bool> HitAsync(BlackJackClient.BlackjackService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/Stay", ReplyAction="BlackjackService/IBlackjackGame/StayResponse")]
        void Stay(BlackJackClient.BlackjackService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/Stay", ReplyAction="BlackjackService/IBlackjackGame/StayResponse")]
        System.Threading.Tasks.Task StayAsync(BlackJackClient.BlackjackService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/IncreasePot", ReplyAction="BlackjackService/IBlackjackGame/IncreasePotResponse")]
        void IncreasePot(int mon);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/IncreasePot", ReplyAction="BlackjackService/IBlackjackGame/IncreasePotResponse")]
        System.Threading.Tasks.Task IncreasePotAsync(int mon);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/GetOtherPlayer", ReplyAction="BlackjackService/IBlackjackGame/GetOtherPlayerResponse")]
        BlackJackClient.BlackjackService.Player GetOtherPlayer(BlackJackClient.BlackjackService.Player current);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/GetOtherPlayer", ReplyAction="BlackjackService/IBlackjackGame/GetOtherPlayerResponse")]
        System.Threading.Tasks.Task<BlackJackClient.BlackjackService.Player> GetOtherPlayerAsync(BlackJackClient.BlackjackService.Player current);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/GetPot", ReplyAction="BlackjackService/IBlackjackGame/GetPotResponse")]
        int GetPot();
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/GetPot", ReplyAction="BlackjackService/IBlackjackGame/GetPotResponse")]
        System.Threading.Tasks.Task<int> GetPotAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/AddPlayer", ReplyAction="BlackjackService/IBlackjackGame/AddPlayerResponse")]
        bool AddPlayer(BlackJackClient.BlackjackService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/AddPlayer", ReplyAction="BlackjackService/IBlackjackGame/AddPlayerResponse")]
        System.Threading.Tasks.Task<bool> AddPlayerAsync(BlackJackClient.BlackjackService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/StartRound", ReplyAction="BlackjackService/IBlackjackGame/StartRoundResponse")]
        void StartRound();
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/StartRound", ReplyAction="BlackjackService/IBlackjackGame/StartRoundResponse")]
        System.Threading.Tasks.Task StartRoundAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/DetermineWinner", ReplyAction="BlackjackService/IBlackjackGame/DetermineWinnerResponse")]
        BlackJackClient.BlackjackService.Player DetermineWinner();
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/DetermineWinner", ReplyAction="BlackjackService/IBlackjackGame/DetermineWinnerResponse")]
        System.Threading.Tasks.Task<BlackJackClient.BlackjackService.Player> DetermineWinnerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/LeaveGame", ReplyAction="BlackjackService/IBlackjackGame/LeaveGameResponse")]
        bool LeaveGame(BlackJackClient.BlackjackService.Player leave);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/LeaveGame", ReplyAction="BlackjackService/IBlackjackGame/LeaveGameResponse")]
        System.Threading.Tasks.Task<bool> LeaveGameAsync(BlackJackClient.BlackjackService.Player leave);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/ReadyPlayer", ReplyAction="BlackjackService/IBlackjackGame/ReadyPlayerResponse")]
        void ReadyPlayer(BlackJackClient.BlackjackService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/ReadyPlayer", ReplyAction="BlackjackService/IBlackjackGame/ReadyPlayerResponse")]
        System.Threading.Tasks.Task ReadyPlayerAsync(BlackJackClient.BlackjackService.Player player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBlackjackGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IBlackjackGame/OnValueChange", ReplyAction="BlackjackService/IBlackjackGame/OnValueChangeResponse")]
        void OnValueChange(BlackJackClient.BlackjackService.Player player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBlackjackGameChannel : BlackJackClient.BlackjackService.IBlackjackGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BlackjackGameClient : System.ServiceModel.DuplexClientBase<BlackJackClient.BlackjackService.IBlackjackGame>, BlackJackClient.BlackjackService.IBlackjackGame {
        
        public BlackjackGameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public BlackjackGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public BlackjackGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BlackjackGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BlackjackGameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Hit(BlackJackClient.BlackjackService.Player player) {
            return base.Channel.Hit(player);
        }
        
        public System.Threading.Tasks.Task<bool> HitAsync(BlackJackClient.BlackjackService.Player player) {
            return base.Channel.HitAsync(player);
        }
        
        public void Stay(BlackJackClient.BlackjackService.Player player) {
            base.Channel.Stay(player);
        }
        
        public System.Threading.Tasks.Task StayAsync(BlackJackClient.BlackjackService.Player player) {
            return base.Channel.StayAsync(player);
        }
        
        public void IncreasePot(int mon) {
            base.Channel.IncreasePot(mon);
        }
        
        public System.Threading.Tasks.Task IncreasePotAsync(int mon) {
            return base.Channel.IncreasePotAsync(mon);
        }
        
        public BlackJackClient.BlackjackService.Player GetOtherPlayer(BlackJackClient.BlackjackService.Player current) {
            return base.Channel.GetOtherPlayer(current);
        }
        
        public System.Threading.Tasks.Task<BlackJackClient.BlackjackService.Player> GetOtherPlayerAsync(BlackJackClient.BlackjackService.Player current) {
            return base.Channel.GetOtherPlayerAsync(current);
        }
        
        public int GetPot() {
            return base.Channel.GetPot();
        }
        
        public System.Threading.Tasks.Task<int> GetPotAsync() {
            return base.Channel.GetPotAsync();
        }
        
        public bool AddPlayer(BlackJackClient.BlackjackService.Player player) {
            return base.Channel.AddPlayer(player);
        }
        
        public System.Threading.Tasks.Task<bool> AddPlayerAsync(BlackJackClient.BlackjackService.Player player) {
            return base.Channel.AddPlayerAsync(player);
        }
        
        public void StartRound() {
            base.Channel.StartRound();
        }
        
        public System.Threading.Tasks.Task StartRoundAsync() {
            return base.Channel.StartRoundAsync();
        }
        
        public BlackJackClient.BlackjackService.Player DetermineWinner() {
            return base.Channel.DetermineWinner();
        }
        
        public System.Threading.Tasks.Task<BlackJackClient.BlackjackService.Player> DetermineWinnerAsync() {
            return base.Channel.DetermineWinnerAsync();
        }
        
        public bool LeaveGame(BlackJackClient.BlackjackService.Player leave) {
            return base.Channel.LeaveGame(leave);
        }
        
        public System.Threading.Tasks.Task<bool> LeaveGameAsync(BlackJackClient.BlackjackService.Player leave) {
            return base.Channel.LeaveGameAsync(leave);
        }
        
        public void ReadyPlayer(BlackJackClient.BlackjackService.Player player) {
            base.Channel.ReadyPlayer(player);
        }
        
        public System.Threading.Tasks.Task ReadyPlayerAsync(BlackJackClient.BlackjackService.Player player) {
            return base.Channel.ReadyPlayerAsync(player);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="BlackjackService", ConfigurationName="BlackjackService.IChat", CallbackContract=typeof(BlackJackClient.BlackjackService.IChatCallback))]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IChat/AddMessage", ReplyAction="BlackjackService/IChat/AddMessageResponse")]
        void AddMessage(string playerName, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IChat/AddMessage", ReplyAction="BlackjackService/IChat/AddMessageResponse")]
        System.Threading.Tasks.Task AddMessageAsync(string playerName, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IChat/Subscribe1", ReplyAction="BlackjackService/IChat/Subscribe1Response")]
        bool Subscribe1();
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IChat/Subscribe1", ReplyAction="BlackjackService/IChat/Subscribe1Response")]
        System.Threading.Tasks.Task<bool> Subscribe1Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IChat/UnSubscribe", ReplyAction="BlackjackService/IChat/UnSubscribeResponse")]
        bool UnSubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="BlackjackService/IChat/UnSubscribe", ReplyAction="BlackjackService/IChat/UnSubscribeResponse")]
        System.Threading.Tasks.Task<bool> UnSubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="BlackjackService/IChat/onMessageAdded")]
        void onMessageAdded(System.DateTime dt, string playerName, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : BlackJackClient.BlackjackService.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<BlackJackClient.BlackjackService.IChat>, BlackJackClient.BlackjackService.IChat {
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddMessage(string playerName, string message) {
            base.Channel.AddMessage(playerName, message);
        }
        
        public System.Threading.Tasks.Task AddMessageAsync(string playerName, string message) {
            return base.Channel.AddMessageAsync(playerName, message);
        }
        
        public bool Subscribe1() {
            return base.Channel.Subscribe1();
        }
        
        public System.Threading.Tasks.Task<bool> Subscribe1Async() {
            return base.Channel.Subscribe1Async();
        }
        
        public bool UnSubscribe() {
            return base.Channel.UnSubscribe();
        }
        
        public System.Threading.Tasks.Task<bool> UnSubscribeAsync() {
            return base.Channel.UnSubscribeAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BlackjackService.IPortal")]
    public interface IPortal {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/Login", ReplyAction="http://tempuri.org/IPortal/LoginResponse")]
        BlackJackClient.BlackjackService.User Login(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/Login", ReplyAction="http://tempuri.org/IPortal/LoginResponse")]
        System.Threading.Tasks.Task<BlackJackClient.BlackjackService.User> LoginAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/Register", ReplyAction="http://tempuri.org/IPortal/RegisterResponse")]
        bool Register(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/Register", ReplyAction="http://tempuri.org/IPortal/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/Logout", ReplyAction="http://tempuri.org/IPortal/LogoutResponse")]
        bool Logout(BlackJackClient.BlackjackService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/Logout", ReplyAction="http://tempuri.org/IPortal/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(BlackJackClient.BlackjackService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/JoinGame", ReplyAction="http://tempuri.org/IPortal/JoinGameResponse")]
        BlackJackClient.BlackjackService.Player JoinGame(BlackJackClient.BlackjackService.BlackJackGame game, BlackJackClient.BlackjackService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/JoinGame", ReplyAction="http://tempuri.org/IPortal/JoinGameResponse")]
        System.Threading.Tasks.Task<BlackJackClient.BlackjackService.Player> JoinGameAsync(BlackJackClient.BlackjackService.BlackJackGame game, BlackJackClient.BlackjackService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/CreateGame", ReplyAction="http://tempuri.org/IPortal/CreateGameResponse")]
        BlackJackClient.BlackjackService.Player CreateGame(BlackJackClient.BlackjackService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/CreateGame", ReplyAction="http://tempuri.org/IPortal/CreateGameResponse")]
        System.Threading.Tasks.Task<BlackJackClient.BlackjackService.Player> CreateGameAsync(BlackJackClient.BlackjackService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/GetGameList", ReplyAction="http://tempuri.org/IPortal/GetGameListResponse")]
        BlackJackClient.BlackjackService.BlackJackGame[] GetGameList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPortal/GetGameList", ReplyAction="http://tempuri.org/IPortal/GetGameListResponse")]
        System.Threading.Tasks.Task<BlackJackClient.BlackjackService.BlackJackGame[]> GetGameListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPortalChannel : BlackJackClient.BlackjackService.IPortal, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PortalClient : System.ServiceModel.ClientBase<BlackJackClient.BlackjackService.IPortal>, BlackJackClient.BlackjackService.IPortal {
        
        public PortalClient() {
        }
        
        public PortalClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PortalClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PortalClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PortalClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BlackJackClient.BlackjackService.User Login(string user) {
            return base.Channel.Login(user);
        }
        
        public System.Threading.Tasks.Task<BlackJackClient.BlackjackService.User> LoginAsync(string user) {
            return base.Channel.LoginAsync(user);
        }
        
        public bool Register(string user) {
            return base.Channel.Register(user);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string user) {
            return base.Channel.RegisterAsync(user);
        }
        
        public bool Logout(BlackJackClient.BlackjackService.User user) {
            return base.Channel.Logout(user);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(BlackJackClient.BlackjackService.User user) {
            return base.Channel.LogoutAsync(user);
        }
        
        public BlackJackClient.BlackjackService.Player JoinGame(BlackJackClient.BlackjackService.BlackJackGame game, BlackJackClient.BlackjackService.User user) {
            return base.Channel.JoinGame(game, user);
        }
        
        public System.Threading.Tasks.Task<BlackJackClient.BlackjackService.Player> JoinGameAsync(BlackJackClient.BlackjackService.BlackJackGame game, BlackJackClient.BlackjackService.User user) {
            return base.Channel.JoinGameAsync(game, user);
        }
        
        public BlackJackClient.BlackjackService.Player CreateGame(BlackJackClient.BlackjackService.User user) {
            return base.Channel.CreateGame(user);
        }
        
        public System.Threading.Tasks.Task<BlackJackClient.BlackjackService.Player> CreateGameAsync(BlackJackClient.BlackjackService.User user) {
            return base.Channel.CreateGameAsync(user);
        }
        
        public BlackJackClient.BlackjackService.BlackJackGame[] GetGameList() {
            return base.Channel.GetGameList();
        }
        
        public System.Threading.Tasks.Task<BlackJackClient.BlackjackService.BlackJackGame[]> GetGameListAsync() {
            return base.Channel.GetGameListAsync();
        }
    }
}
